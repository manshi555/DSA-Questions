============================== BRUTE FORCE APPROACH ==========================================
public class HashSet {

	boolean [] flag;

	HashSet() {
		flag = new boolean[1000001];
	}

	void add(int key) {
		flag[key] = true;
	}

	int removeElement(int key) {
		if(! contains(key)) return -1;
		flag[key] = false;
		return key;
	}

	boolean contains(int key) {
		return flag[key];
	}
};

========================================PREFERD APPROACH =============================================
import java.util.ArrayList;
import java.util.List;

class MyHashSet {

    private final int ARRAY_SIZE = 1000001;
    List<List<Integer>> parentList;

    int hash(int key) {
        return key % ARRAY_SIZE;
    }

    public MyHashSet() {
        parentList = new ArrayList<>(ARRAY_SIZE);
        for(int i=0 ; i<ARRAY_SIZE ; i++)
        {
            parentList.add(null);
        }
    }

    public void add(int key) {
        int index = hash(key);
        List<Integer> childList = parentList.get(key);
        if(childList == null)
        {
            List<Integer> list = new LinkedList<Integer>();
            list.add(key);
            parentList.set(index, list);
        }
        else if( ! childList.contains(key))
        {
            childList.add(key);
        }
        
    }

    public void remove(int key) {
        int index = hash(key);
        List<Integer> childList = parentList.get(key);
        if(childList != null)
        {
            childList.remove(Integer.valueOf(key));
        }
    }

    public boolean contains(int key) {
        int index = hash(key);
        List<Integer> childList = parentList.get(key);
        return childList != null && childList.contains(key);
    }
}

/**
 * Your MyHashSet object will be instantiated and called as such:
 * MyHashSet obj = new MyHashSet();
 * obj.add(key);
 * obj.remove(key);
 * boolean param_3 = obj.contains(key);
 */
